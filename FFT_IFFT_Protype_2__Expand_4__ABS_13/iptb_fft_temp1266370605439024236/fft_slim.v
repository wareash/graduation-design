// megafunction wizard: %FFT v13.0%
// GENERATION: XML

// ============================================================
// Megafunction Name(s):
// 			asj_fft_sglstream_fft_130
// ============================================================
// Generated by FFT 13.0 [Altera, IP Toolbench 1.3.0 Build 156]
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
// ************************************************************
// Copyright (C) 1991-2014 Altera Corporation
// Any megafunction design, and related net list (encrypted or decrypted),
// support information, device programming or simulation file, and any other
// associated documentation or information provided by Altera or a partner
// under Altera's Megafunction Partnership Program may be used only to
// program PLD devices (but not masked PLD devices) from Altera.  Any other
// use of such megafunction design, net list, support information, device
// programming or simulation file, or any other related documentation or
// information is prohibited for any other purpose, including, but not
// limited to modification, reverse engineering, de-compiling, or use with
// any other silicon devices, unless such use is explicitly licensed under
// a separate agreement with Altera or a megafunction partner.  Title to
// the intellectual property, including patents, copyrights, trademarks,
// trade secrets, or maskworks, embodied in any such megafunction design,
// net list, support information, device programming or simulation file, or
// any other related documentation or information provided by Altera or a
// megafunction partner, remains with Altera, the megafunction partner, or
// their respective licensors.  No other licenses, including any licenses
// needed under any third party's intellectual property, are provided herein.


module fft_slim (
	clk,
	reset_n,
	inverse,
	sink_valid,
	sink_sop,
	sink_eop,
	sink_real,
	sink_imag,
	sink_error,
	source_ready,
	sink_ready,
	source_error,
	source_sop,
	source_eop,
	source_valid,
	source_exp,
	source_real,
	source_imag);


	input		clk;
	input		reset_n;
	input		inverse;
	input		sink_valid;
	input		sink_sop;
	input		sink_eop;
	input	[7:0]	sink_real;
	input	[7:0]	sink_imag;
	input	[1:0]	sink_error;
	input		source_ready;
	output		sink_ready;
	output	[1:0]	source_error;
	output		source_sop;
	output		source_eop;
	output		source_valid;
	output	[5:0]	source_exp;
	output	[7:0]	source_real;
	output	[7:0]	source_imag;


	asj_fft_sglstream_fft_130	asj_fft_sglstream_fft_130_inst(
		.clk(clk),
		.reset_n(reset_n),
		.inverse(inverse),
		.sink_valid(sink_valid),
		.sink_sop(sink_sop),
		.sink_eop(sink_eop),
		.sink_real(sink_real),
		.sink_imag(sink_imag),
		.sink_error(sink_error),
		.source_ready(source_ready),
		.sink_ready(sink_ready),
		.source_error(source_error),
		.source_sop(source_sop),
		.source_eop(source_eop),
		.source_valid(source_valid),
		.source_exp(source_exp),
		.source_real(source_real),
		.source_imag(source_imag));

	defparam
		asj_fft_sglstream_fft_130_inst.nps = 128,
		asj_fft_sglstream_fft_130_inst.bfp = 1,
		asj_fft_sglstream_fft_130_inst.nume = 1,
		asj_fft_sglstream_fft_130_inst.mpr = 8,
		asj_fft_sglstream_fft_130_inst.twr = 8,
		asj_fft_sglstream_fft_130_inst.bpr = 16,
		asj_fft_sglstream_fft_130_inst.bpb = 4,
		asj_fft_sglstream_fft_130_inst.fpr = 4,
		asj_fft_sglstream_fft_130_inst.mram = 0,
		asj_fft_sglstream_fft_130_inst.m512 = 0,
		asj_fft_sglstream_fft_130_inst.mult_type = 1,
		asj_fft_sglstream_fft_130_inst.mult_imp = 0,
		asj_fft_sglstream_fft_130_inst.dsp_arch = 0,
		asj_fft_sglstream_fft_130_inst.srr = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF",
		asj_fft_sglstream_fft_130_inst.rfs1 = "fft_slim_1n128sin.hex",
		asj_fft_sglstream_fft_130_inst.rfs2 = "fft_slim_2n128sin.hex",
		asj_fft_sglstream_fft_130_inst.rfs3 = "fft_slim_3n128sin.hex",
		asj_fft_sglstream_fft_130_inst.rfc1 = "fft_slim_1n128cos.hex",
		asj_fft_sglstream_fft_130_inst.rfc2 = "fft_slim_2n128cos.hex",
		asj_fft_sglstream_fft_130_inst.rfc3 = "fft_slim_3n128cos.hex";
endmodule
