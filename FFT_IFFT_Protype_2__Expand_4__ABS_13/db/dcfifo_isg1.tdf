--dcfifo_mixed_widths CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone II" IGNORE_CARRY_BUFFERS="OFF" LPM_NUMWORDS=2048 LPM_SHOWAHEAD="OFF" LPM_WIDTH=8 LPM_WIDTH_R=8 LPM_WIDTHU=11 LPM_WIDTHU_R=11 OVERFLOW_CHECKING="ON" RDSYNC_DELAYPIPE=3 UNDERFLOW_CHECKING="ON" USE_EAB="ON" WRSYNC_DELAYPIPE=3 data q rdclk rdempty rdfull rdreq wrclk wrempty wrfull wrreq CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone II" LOW_POWER_MODE="AUTO" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
--VERSION_BEGIN 13.0 cbx_a_gray2bin 2013:04:24:18:08:47:SJ cbx_a_graycounter 2013:04:24:18:08:47:SJ cbx_altdpram 2013:04:24:18:08:47:SJ cbx_altsyncram 2013:04:24:18:08:47:SJ cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_dcfifo 2013:04:24:18:08:47:SJ cbx_fifo_common 2013:04:24:18:08:47:SJ cbx_lpm_add_sub 2013:04:24:18:08:47:SJ cbx_lpm_compare 2013:04:24:18:08:47:SJ cbx_lpm_counter 2013:04:24:18:08:47:SJ cbx_lpm_decode 2013:04:24:18:08:47:SJ cbx_lpm_mux 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_scfifo 2013:04:24:18:08:47:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ cbx_stratixiii 2013:04:24:18:08:47:SJ cbx_stratixv 2013:04:24:18:08:47:SJ cbx_util_mgl 2013:04:24:18:08:47:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION a_graycounter_q96 (aclr, clock, cnt_en)
RETURNS ( q[11..0]);
FUNCTION a_graycounter_f2c (clock, cnt_en)
RETURNS ( q[11..0]);
FUNCTION a_graycounter_g2c (clock, cnt_en)
RETURNS ( q[11..0]);
FUNCTION altsyncram_vmu (address_a[10..0], address_b[10..0], addressstall_b, clock0, clock1, clocken1, data_a[7..0], wren_a)
RETURNS ( q_b[7..0]);
FUNCTION dffpipe_c2e (clock, d[0..0])
RETURNS ( q[0..0]);
FUNCTION alt_synch_pipe_0u7 (clock, d[0..0])
RETURNS ( q[0..0]);
FUNCTION alt_synch_pipe_kv7 (clock, d[11..0])
RETURNS ( q[11..0]);
FUNCTION alt_synch_pipe_397 (clock, d[0..0])
RETURNS ( q[0..0]);
FUNCTION alt_synch_pipe_lv7 (clock, d[11..0])
RETURNS ( q[11..0]);
FUNCTION cmpr_736 (dataa[11..0], datab[11..0])
RETURNS ( aeb);

--synthesis_resources = M4K 4 reg 101 
OPTIONS ALTERA_INTERNAL_OPTION = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=s102;{-to p0addr} POWER_UP_LEVEL=LOW;-name CUT ON -from rdptr_g -to ws_dgrp|dffpipe_f09:dffpipe26|dffe27a;-name SDC_STATEMENT ""set_false_path -from *rdptr_g* -to *ws_dgrp|dffpipe_f09:dffpipe26|dffe27a* "";-name CUT ON -from delayed_wrptr_g -to rs_dgwp|dffpipe_e09:dffpipe22|dffe23a;-name SDC_STATEMENT ""set_false_path -from *delayed_wrptr_g* -to *rs_dgwp|dffpipe_e09:dffpipe22|dffe23a* "";-name CUT ON -from previous_wrfull -to rdfull_reg|dffpipe_qu8:dffpipe20|dffe21a;-name SDC_STATEMENT ""set_false_path -from *previous_wrfull* -to *rdfull_reg|dffpipe_qu8:dffpipe20|dffe21a* "";-name CUT ON -from previous_rdempty -to wrempty_reg|dffpipe_t98:dffpipe24|dffe25a;-name SDC_STATEMENT ""set_false_path -from *previous_rdempty* -to *wrempty_reg|dffpipe_t98:dffpipe24|dffe25a* """;

SUBDESIGN dcfifo_isg1
( 
	data[7..0]	:	input;
	q[7..0]	:	output;
	rdclk	:	input;
	rdempty	:	output;
	rdfull	:	output;
	rdreq	:	input;
	wrclk	:	input;
	wrempty	:	output;
	wrfull	:	output;
	wrreq	:	input;
) 
VARIABLE 
	rdptr_g1p : a_graycounter_q96;
	wrptr_g1p : a_graycounter_f2c;
	wrptr_gp : a_graycounter_g2c;
	fifo_ram : altsyncram_vmu;
	delayed_wrptr_g[11..0] : dffe;
	p0addr : dffe
		WITH (
			power_up = "low"
		);
	previous_rdempty : dffe;
	previous_wrfull : dffe;
	rdptr_g[11..0] : dffe;
	rdaclr : dffpipe_c2e;
	rdfull_reg : alt_synch_pipe_0u7;
	rs_dgwp : alt_synch_pipe_kv7;
	wrempty_reg : alt_synch_pipe_397;
	ws_dgrp : alt_synch_pipe_lv7;
	rdempty_eq_comp : cmpr_736;
	wrfull_eq_comp : cmpr_736;
	int_rdempty	: WIRE;
	int_rdfull	: WIRE;
	int_wrempty	: WIRE;
	int_wrfull	: WIRE;
	ram_address_a[10..0]	: WIRE;
	ram_address_b[10..0]	: WIRE;
	rdcnt_addr_ena	: WIRE;
	valid_rdreq	: WIRE;
	valid_wrreq	: WIRE;
	wrptr_gs[11..0]	: WIRE;

BEGIN 
	rdptr_g1p.aclr = (! rdaclr.q[]);
	rdptr_g1p.clock = rdclk;
	rdptr_g1p.cnt_en = rdcnt_addr_ena;
	wrptr_g1p.clock = wrclk;
	wrptr_g1p.cnt_en = valid_wrreq;
	wrptr_gp.clock = wrclk;
	wrptr_gp.cnt_en = valid_wrreq;
	fifo_ram.address_a[] = ram_address_a[];
	fifo_ram.address_b[] = ram_address_b[];
	fifo_ram.addressstall_b = (! rdcnt_addr_ena);
	fifo_ram.clock0 = wrclk;
	fifo_ram.clock1 = rdclk;
	fifo_ram.clocken1 = valid_rdreq;
	fifo_ram.data_a[] = data[];
	fifo_ram.wren_a = valid_wrreq;
	delayed_wrptr_g[].clk = wrclk;
	delayed_wrptr_g[].d = wrptr_gp.q[];
	p0addr.clk = rdclk;
	p0addr.clrn = rdaclr.q[];
	p0addr.d = B"1";
	previous_rdempty.clk = rdclk;
	previous_rdempty.d = (! int_rdempty);
	previous_wrfull.clk = wrclk;
	previous_wrfull.d = int_wrfull;
	rdptr_g[].clk = rdclk;
	rdptr_g[].d = rdptr_g1p.q[];
	rdptr_g[].ena = valid_rdreq;
	rdaclr.clock = (! rdclk);
	rdaclr.d[] = B"1";
	rdfull_reg.clock = rdclk;
	rdfull_reg.d[] = previous_wrfull.q;
	rs_dgwp.clock = rdclk;
	rs_dgwp.d[] = delayed_wrptr_g[].q;
	wrempty_reg.clock = wrclk;
	wrempty_reg.d[] = previous_rdempty.q;
	ws_dgrp.clock = wrclk;
	ws_dgrp.d[] = rdptr_g[].q;
	rdempty_eq_comp.dataa[] = rs_dgwp.q[];
	rdempty_eq_comp.datab[] = rdptr_g[].q;
	wrfull_eq_comp.dataa[] = ws_dgrp.q[];
	wrfull_eq_comp.datab[] = wrptr_gs[];
	int_rdempty = rdempty_eq_comp.aeb;
	int_rdfull = rdfull_reg.q[];
	int_wrempty = (! wrempty_reg.q[]);
	int_wrfull = wrfull_eq_comp.aeb;
	q[] = fifo_ram.q_b[];
	ram_address_a[] = ( (wrptr_gp.q[11..11] $ wrptr_gp.q[10..10]), wrptr_gp.q[9..0]);
	ram_address_b[] = ( (rdptr_g1p.q[11..11] $ rdptr_g1p.q[10..10]), rdptr_g1p.q[9..0]);
	rdcnt_addr_ena = (valid_rdreq # (! p0addr.q));
	rdempty = int_rdempty;
	rdfull = int_rdfull;
	valid_rdreq = (rdreq & (! int_rdempty));
	valid_wrreq = (wrreq & (! int_wrfull));
	wrempty = int_wrempty;
	wrfull = int_wrfull;
	wrptr_gs[] = ( (! wrptr_gp.q[11..11]), (! wrptr_gp.q[10..10]), wrptr_gp.q[9..0]);
END;
--VALID FILE
